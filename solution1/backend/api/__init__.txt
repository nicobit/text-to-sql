import os
import json

import azure.functions as func
import openai

from fastapi import FastAPI, Request, Response,Depends,HTTPException
from starlette.middleware.cors import CORSMiddleware
from langchain.schema import SystemMessage, HumanMessage
from typing import Dict
from pydantic import BaseModel
import uuid
from . import auth, ai_bot  # import submodules for auth, database, AI logic



# Initialize FastAPI App
fast_app = FastAPI() 

# Enable CORS (Allow only frontend domain)
fast_app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://mywebsite.com", "http://localhost:3000", "http://localhost:5173"],  # Replace with your front-end URL
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@fast_app.get("/") 
async def return_http_no_body(): 
    return Response(content="Text to SQL Is working", media_type="text/plain") 



async def get_current_user(request: func.HttpRequest):
    """
    Validate JWT access token from Authorization header and return user principal.
    """
    token = request.headers.get("Authorization")
    if token is None or not token.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="Unauthorized")

    token = token[len("Bearer "):]

    
    claims = auth.verify_jwt(token)  # verify signature and audience
    if not claims:
        raise HTTPException(status_code=401, detail="Unauthorized")
    
    return claims  # or return entire claims/object as needed

# Pydantic model for request
class QueryRequest(BaseModel):
    query: str
    session_id: str 

class QueryResponse(BaseModel):
    chart_type: str
    results: list
    

@fast_app.post("/query")
async def nl_to_sql(req: QueryRequest):
    """
    Handle a natural language query, convert to SQL, execute it, and return results.
    """
    try:
        user = get_current_user(req)
        body = req.get_json()
        query = req.query # body.get('query')
        session_id = req.session_id # body.get('session_id')
        result = await ai_bot.nl_to_sql(query, session_id, user["oid"])
        if result["chart_type"] == None:
            result["chart_type"] = "None"

        return {"results": result["response"],"chart_type":result["chart_type"]}

    except Exception as e:
    
        raise HTTPException(status_code=500, detail=str(e))


        
