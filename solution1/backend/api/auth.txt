from fastapi.security import OAuth2AuthorizationCodeBearer, HTTPBearer
import jwt
import requests
import os

import base64
import json

# This module verifies incoming JWT access tokens from Azure AD. We can use MSAL or PyJWT along with the Azure AD public keys (JWKS) to validate the token. In many cases, Azure Functions can also be configured with Easy Auth (Azure AD integrated authentication), but here it is used manual verification:
# Configure the OAuth2 scheme (if we were to use FastAPI's OAuth2 dependency flow)
# But since the token comes from front-end, we can use HTTPBearer and verify manually.
oauth2_scheme = HTTPBearer()  # just to extract "Authorization: Bearer ..." header

# Azure AD config
TENANT_ID = os.getenv("AZURE_AD_TENANT_ID")
CLIENT_ID = os.getenv("AZURE_AD_CLIENT_ID")  # App ID of the backend API
# Fetch Azure AD public keys for token signature verification
jwks_url = f"https://login.microsoftonline.com/{TENANT_ID}/discovery/v2.0/keys"
jwks_keys = requests.get(jwks_url).json()["keys"]


def verify_jwt(token: str):
    # Split the JWT into its parts (header, payload, signature)
    try:
        # JWT parts are separated by '.'
        header_b64, payload_b64, signature_b64 = token.split('.')

        # Add padding to Base64 URL encoded string if necessary
        header_b64 = header_b64 + '=' * (4 - len(header_b64) % 4)
        payload_b64 = payload_b64 + '=' * (4 - len(payload_b64) % 4)

        # Decode the Base64 URL encoded parts
        header = base64.urlsafe_b64decode(header_b64).decode('utf-8')
        payload = base64.urlsafe_b64decode(payload_b64).decode('utf-8')

        # Parse the decoded JSON strings into Python dictionaries
        header_json = json.loads(header)
        payload_json = json.loads(payload)

        # Return the claims (the decoded payload)
        return payload_json

    except Exception as ex:
        
        print(f"Error decoding JWT: {str(ex)}")
        return None


def verify_jwtA(token: str):
    
    
    
    # remove "Bearer " prefix if present
    if token.lower().startswith("bearer "):
        token = token[len("bearer "):]
    # Verify token signature and audience
    try:
        # In production, cache the JWKS and handle key rollover
        kid = jwt.get_unverified_header(token)["kid"]
        key = next(key for key in jwks_keys if key["kid"] == kid)
        public_key = jwt.algorithms.RSAAlgorithm.from_jwk(key)
        claims = jwt.decode(token, public_key, algorithms=["RS256"], audience=CLIENT_ID, issuer=f"https://login.microsoftonline.com/{TENANT_ID}/v2.0")
        return claims  # if valid
    except Exception as ex:
     
        # Token invalid or expired
        return None

